import torch
import time
from torchvision import models, datasets, transforms
from torch.utils.data import DataLoader
from torch import nn, optim
import torchvision.models as models


# defining transformations for CIFAR-10 data
transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# loading CIFAR-10 dataset
train_data = datasets.CIFAR10(root='./data', train=True, transform=transform, download=True)
test_data = datasets.CIFAR10(root='./data', train=False, transform=transform, download=True)
train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_loader = DataLoader(test_data, batch_size=64, shuffle=False)

# defining models and training parameters
models_dict = {
    "Resnet-18" : models.resnet18(weights='IMAGENET1K_V1'),
   "Alexnet" : models.alexnet(weights='IMAGENET1K_V1'), 
    "Mobilenet" : models.mobilenet_v2(weights='IMAGENET1K_V1')
}

num_epochs = 10  # Adjust for actual use
results = []

for model_name, model in models_dict.items():
 model.fc = nn.Linear(model.fc.in_features, 10) if hasattr(model, 'fc') else nn.Linear(1280, 10)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # training loop
    start_time = time.time()
    for epoch in range(num_epochs):
        model.train()
        correct, total = 0, 0
        for images, labels in train_loader:
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

        train_accuracy = 100 * correct / total
        training_time = (time.time() - start_time) / (epoch + 1) /60  


    # validation and Test Accuracy
    model.eval()
    with torch.no_grad():
        val_correct, val_total, test_correct, test_total = 0, 0, 0, 0

        for images, labels in test_loader:
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            test_total += labels.size(0)
            test_correct += (predicted == labels).sum().item()

        validation_accuracy = 100 * val_correct / val_total
        test_accuracy = 100 * test_correct / test_total

    # storing results
    results.append({
        "Model": model_name,
        "Training Accuracy": f"{train_accuracy:.2f}%",
        "Validation Accuracy": f"{validation_accuracy:.2f}%",
        "Test Accuracy": f"{test_accuracy:.2f}%",
        "Training Time (per epoch)": f"{training_time:.2f} minutes"
    })

# displaying results in table format
import pandas as pd
df_results = pd.DataFrame(results)
print(df_results)




